// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  name       String?
  password   String
  properties Property[]
}

model Property {
  id             Int             @id @default(autoincrement())
  title          String
  content        String?
  address        String
  thumbnail      String?
  longitude      Decimal?
  latitude       Decimal?
  area           Decimal?
  bedrooms       Decimal?
  bathrooms      Decimal?
  price          Decimal?
  heatingType    String?
  heatingMedium  String?
  heatingEnergy  String?
  view           String?
  furnished      Boolean         @default(false)
  active         Boolean         @default(false)
  type           Boolean         @default(false)
  frecuency      String?
  publishedBy    User            @relation(fields: [publishedById], references: [id])
  publishedById  Int
  country        Country         @relation(fields: [countryId], references: [id])
  countryId      Int
  currency       Currency        @relation(fields: [currencyId], references: [id])
  currencyId     Int
  propertyType   PropertyType    @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId Int
  PropertyImage  PropertyImage[]
  Surface        Surface[]
  Benefits       Benefits[]
  NearPlace      NearPlace[]
  LegalNotice    LegalNotice[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model PropertyType {
  id       Int        @id @default(autoincrement())
  name     String
  code     String     @unique
  Property Property[]
}

model PropertyImage {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  path        String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  Int
}

model Surface {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  quantity    String
  areaId      Int
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  Int
}

model Benefits {
  id         Int      @id @default(autoincrement())
  name       String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
}

model LegalNotice {
  id         Int      @id @default(autoincrement())
  name       String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
}

model NearPlace {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  Int
}

model Currency {
  id            Int        @id @default(autoincrement())
  symbol        String
  name          String
  nativeSymbol  String
  decimalDigits Int
  round         Int
  code          String     @unique
  pluralName    String
  Property      Property[]
}

model Country {
  id        Int         @id @default(autoincrement())
  name      String
  code      String      @unique
  capital   String
  phone     String
  currency  String
  Property  Property[]
  Affiliate Affiliate[]
}

model Affiliate {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  status    Boolean
  phone     String
  plan      Plan
  plan_date DateTime
  country   Country  @relation(fields: [countryId], references: [id])
  countryId Int
  Pay       Pay[]
}

enum Plan {
  Student
  JobSeeker
  Business
}

model Pay {
  id          Int       @id @default(autoincrement())
  date        DateTime? @default(now())
  reference   String?   @default(uuid())
  months      Int       @default(1)
  quantity    Decimal?
  status      Boolean
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  affiliateId Int
}
